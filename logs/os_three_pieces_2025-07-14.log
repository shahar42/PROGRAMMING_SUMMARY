‚úÖ Grok API key loaded successfully (length: 84 chars)
ü§ñ Grok AI initialized successfully
üèõÔ∏è  Operating Systems Archaeological Extraction Engine Initialized
üìö Source: /home/shahar42/Suumerizing_C_holy_grale_book/Operating Systems - Three Easy Pieces.pdf
üìÅ Output: /home/shahar42/Suumerizing_C_holy_grale_book/outputs/os_three_pieces
üìä Previous progress: 12 concepts extracted

üîç Starting Operating Systems extraction session...
üìñ Extracting OS content from page 46...
üß† Detected 69 potential OS atomic concepts

‚ö° Processing OS concept 1/4...
Full Grok response: {
  "topic": "The main() Function",
  "explanation": "The main() function is the entry point of a C program, where execution begins when the program is run as a process by the operating system. It is used because it allows the program to define its behavior, transforming static code into a running entity that interacts with the system.",
  "syntax": "int main()",
  "code_example": [
    "#include <stdio.h>",
    "int main() {",
    "    printf(\"This is a running C program.\\n\");",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates the main() function as the starting point of a C program. When executed, it prints 'This is a running C program.' to the console and returns 0, showing how the program comes to life as a process and performs a simple action before terminating."
}
Response length: 820
‚úÖ Saved OS concept: The main() Function

‚ö° Processing OS concept 2/4...
Full Grok response: {
  "topic": "Fork System Call",
  "explanation": "The fork() system call in C is used to create a new process by duplicating the existing one, allowing for concurrency and multitasking. It enables the illusion of running multiple programs simultaneously on a single CPU through time-sharing, as the operating system switches between processes, making the system more efficient and user-friendly.",
  "syntax": "pid_t fork(void);",
  "code_example": [
    "#include <stdio.h>",
    "#include <unistd.h>",
    "int main() {",
    "    printf(\"Before fork\\n\");",
    "    pid_t pid = fork();",
    "    if (pid == 0) {",
    "        printf(\"Child process\\n\");",
    "    } else {",
    "        printf(\"Parent process\\n\");",
    "    }",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates the fork() system call by first printing 'Before fork' in the parent process. After fork() is called, it creates a child process, which prints 'Child process'. The parent process prints 'Parent process'. This shows how one program can spawn multiple processes, illustrating the concept of CPU time-sharing where the OS manages execution between them."
}
Response length: 1185
‚úÖ Saved OS concept: Fork System Call

‚ö° Processing OS concept 3/4...
Full Grok response: {
  "topic": "Context Switch",
  "explanation": "A context switch is a technique used in operating systems to pause the execution of one program and resume another on the same CPU, enabling efficient timesharing of resources like the processor. It allows multiple processes to share the CPU by saving the current program's state and loading another, which is essential for multitasking and responsive systems in modern OSes.",
  "syntax": "int setjmp(jmp_buf env); void longjmp(jmp_buf env, int val);",
  "code_example": [
    "#include <setjmp.h>",
    "#include <stdio.h>",
    "",
    "jmp_buf env;",
    "",
    "int main() {",
    "    if (setjmp(env) == 0) {",
    "        printf(\"Original context: Starting execution\\n\");",
    "        longjmp(env, 1);  // Simulate switching to another context",
    "    } else {",
    "        printf(\"Switched context: Execution resumed here\\n\");",
    "    }",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This program uses setjmp to save the current context and longjmp to restore it, simulating a basic context switch. It first prints a message in the original context, then jumps to the else block, printing a message in the switched context, demonstrating how execution state is saved and restored to enable timesharing of the CPU."
}
Response length: 1306
‚úÖ Saved OS concept: Context Switch

‚ö° Processing OS concept 4/4...
Full Grok response: {
  "topic": "C Function",
  "explanation": "A C function is a reusable block of code that performs a specific task. It is used to organize code into logical units, promote reusability, and make programs easier to read, debug, and maintain, much like how policies in an operating system are algorithms for decision-making.",
  "syntax": "return_type function_name(parameter_types);",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int add(int a, int b) {",
    "    return a + b;",
    "}",
    "",
    "int main() {",
    "    int result = add(3, 4);",
    "    printf(\"%d\\n\", result);",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example defines a simple function 'add' that takes two integers as parameters and returns their sum. The main function calls 'add' with arguments 3 and 4, stores the result, and prints it, demonstrating how a C function encapsulates a specific task and can be invoked to perform that task within a program."
}
Response length: 978
‚úÖ Saved OS concept: C Function
üìã OS daily summary saved: os_daily_summary_2025-07-14.md

üìä OS session complete: 4 atomic concepts extracted
üìà Total OS progress: 16 concepts

‚è≥ Run OS script again tomorrow to continue extraction...
