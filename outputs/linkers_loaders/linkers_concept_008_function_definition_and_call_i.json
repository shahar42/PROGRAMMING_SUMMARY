{
  "topic": "Function Definition and Call in C",
  "explanation": "Functions are reusable blocks of code that perform specific tasks.  They improve code organization, readability, and reusability by breaking down a large program into smaller, manageable modules.  A function definition specifies the function's name, parameters (inputs), return type (output), and the code it executes. A function call invokes the execution of that function.",
  "syntax": "return_type function_name(parameter_type parameter1, parameter_type parameter2, ...){\n  // function body\n  return value;\n}",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int add(int a, int b) {",
    "  return a + b;",
    "}",
    "",
    "int main() {",
    "  int sum = add(5, 3);",
    "  printf(\"The sum is: %d\\n\", sum);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example defines a function `add` that takes two integer parameters (`a` and `b`) and returns their sum as an integer. The `main` function then calls `add` with the arguments 5 and 3, storing the returned value (8) in the `sum` variable. Finally, it prints the value of `sum` to the console. This demonstrates both the definition and the call of a function in C.",
  "extraction_metadata": {
    "source": "Linkers and Loaders",
    "page_range": "16-17",
    "extraction_date": "2025-07-13T00:59:13.573670",
    "has_code": false,
    "has_explanation": true
  }
}