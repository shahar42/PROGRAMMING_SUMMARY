{
  "topic": "Symbol Resolution",
  "explanation": "Symbol resolution is the process of associating symbolic names (like function or variable names) used in a program's source code with their actual memory addresses during the linking and loading process.  This is crucial because different compilation units (object files) may define or reference the same symbols. The linker resolves these references by matching up the definitions and uses, ensuring that all parts of the program can communicate correctly.",
  "syntax": "No single syntax, but involves examining symbol tables within object files and resolving external references.  Linkers use algorithms to find definitions for referenced symbols (ER and WX in the example), potentially reporting errors for unresolved external references (ER).",
  "code_example": [
    "/* Example Object File Structure (simplified representation) */",
    "typedef struct {",
    "  char name[8]; /* Symbol name */",
    "  char type;     /* Symbol type (e.g., 'SD', 'LD', 'ER', 'WX') */",
    "  char base[3];  /* Base address or offset */",
    "  char bits;     /* Attributes */",
    "  char len[3];   /* Length */",
    "} SymbolRecord;",
    "",
    "/* Example symbol records from different object files */",
    "SymbolRecord func1_sym = { \"func1\", 'SD', {0, 0, 0}, 0, {100, 0, 0} }; /* Function definition */",
    "SymbolRecord var1_sym = { \"var1\", 'LD', {10, 0, 0}, 0, {100, 0, 0} }; /* Variable definition */",
    "SymbolRecord func1_ref_sym = { \"func1\", 'ER', {0, 0, 0}, 0, {0, 0, 0} }; /* Function reference */",
    "",
    "/* Simplified Linker action: Matching references to definitions*/",
    "/* ...Linker algorithm would match func1_ref_sym with func1_sym, resolving the reference... */"
  ],
  "example_explanation": "The code example illustrates a simplified representation of object file symbol table entries.  Each entry represents a symbol with its type, name, location details, and attributes. The 'ER' (external reference) type highlights the key role of symbol resolution. A linker's task is to match each 'ER' symbol to a corresponding definition ('SD' for a function or 'LD' for a variable) within the object files being linked. The simplified final comment represents the key linking step: if the linker finds a match, it resolves the symbol reference, effectively assigning the appropriate address to each reference. If an 'ER' symbol cannot be found, the linker signals an error, indicating an unresolved external symbol.",
  "extraction_metadata": {
    "source": "Linkers and Loaders",
    "page_range": "105-105",
    "extraction_date": "2025-07-18T00:57:49.568795",
    "has_code": true,
    "has_explanation": true,
    "book_context": "linkers_loaders"
  }
}