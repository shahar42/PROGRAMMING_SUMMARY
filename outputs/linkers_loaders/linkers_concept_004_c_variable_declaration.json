{
  "topic": "C Variable Declaration",
  "explanation": "Variable declaration in C tells the compiler to reserve a space in memory to store a value of a specific data type.  It associates a name (identifier) with this memory location, allowing the program to access and manipulate the stored value. This is fundamental for storing and processing data within a C program.",
  "syntax": "data_type variable_name;  or  data_type variable_name = initial_value;",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int main() {",
    "  int age = 30;  // Declare an integer variable 'age' and initialize it to 30",
    "  float price = 99.99; // Declare a float variable 'price' and initialize it to 99.99",
    "  char initial = 'J'; // Declare a character variable 'initial' and initialize it to 'J'",
    "",
    "  printf(\"Age: %d\\n\", age);",
    "  printf(\"Price: %f\\n\", price);",
    "  printf(\"Initial: %c\\n\", initial);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates three variable declarations.  An integer variable `age` stores a whole number, a float variable `price` stores a decimal number, and a character variable `initial` stores a single character. Each variable is declared with its data type (int, float, char) followed by its name, and optionally assigned an initial value. The `printf` function then displays the values stored in these variables, proving that they were successfully declared and initialized.",
  "extraction_metadata": {
    "source": "Linkers and Loaders",
    "page_range": "2-4",
    "extraction_date": "2025-07-13T00:41:53.683358",
    "has_code": false,
    "has_explanation": true
  }
}