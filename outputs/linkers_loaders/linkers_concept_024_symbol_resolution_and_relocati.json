{
  "topic": "Symbol Resolution and Relocation",
  "explanation": "Symbol resolution is the process of associating symbolic names (like function or variable names) used in a program's source code with their corresponding memory addresses.  Relocation is the process of adjusting the addresses within an object file so that the program can be loaded correctly into memory at any arbitrary location.  Together, they are crucial for the linker to create an executable from multiple object files and for the loader to place the program in memory at runtime.  Without symbol resolution, the linker wouldn't know how to connect different parts of the program; without relocation, the program would only work at a single predetermined memory location.",
  "syntax": "This doesn't have a single, concise syntax, but rather involves multiple steps within a linker and loader.  Symbol resolution involves searching symbol tables in object files for definitions and references. Relocation involves processing relocation entries within object files, which specify which addresses need modification and how.",
  "code_example": [
    "/* File: module1.c */",
    "int global_var = 10;",
    "int add(int a, int b) { return a + b; }",
    "",
    "/* File: module2.c */",
    "#include <stdio.h>",
    "extern int global_var;",
    "extern int add(int, int);",
    "int main() {",
    "  int result = add(5, global_var);",
    "  printf(\"Result: %d\\n\", result);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example shows two modules. `module1.c` defines a global variable `global_var` and a function `add`. `module2.c` uses these symbols.  The linker resolves the symbols `global_var` and `add` by finding their definitions in `module1.o`. It then creates an executable file. The relocation process ensures that the calls to `global_var` and `add` in `module2.o` are correctly adjusted to their final memory addresses in the loaded executable. The loader loads this executable into memory, performing any necessary final address adjustments to ensure that the program functions correctly.",
  "extraction_metadata": {
    "source": "Linkers and Loaders",
    "page_range": "91-91",
    "extraction_date": "2025-07-17T11:05:43.983869",
    "has_code": false,
    "has_explanation": true,
    "book_context": "linkers_loaders"
  }
}