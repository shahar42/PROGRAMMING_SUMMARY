{
  "topic": "Object File Formats and Symbol Resolution",
  "explanation": "Object files are the intermediate stage between compilation and the final executable. They contain machine code, data, and metadata such as symbol tables.  Symbol resolution is the crucial process of linking these object files together.  The linker uses the symbol tables to match up function and variable references in one object file to their definitions in others. This ensures that calls to functions or accesses to variables across multiple compiled units work correctly within the final executable.  Different operating systems use different object file formats (e.g., ELF, COFF, PE) but the underlying principles of symbol tables and their use in linking remain consistent.",
  "syntax": "Object File Format (e.g., ELF):\nHeader:\n  - Magic number (identifies the file type)\n  - Program header table (describes the segments of the executable)\n  - Section header table (describes the sections of the object file)\nSections:\n  - .text (code segment)\n  - .data (initialized data segment)\n  - .bss (uninitialized data segment)\n  - .symtab (symbol table \u2013 containing function and variable names and addresses)\n  - .rel.text (relocation table for the text section)\nSymbol Table Entry:\n  - Symbol name\n  - Symbol type (function, variable, etc.)\n  - Symbol value (address)\n  - Symbol size\nRelocation Entry:\n  - Offset in the section\n  - Symbol to relocate\n  - Relocation type",
  "code_example": [
    "# Assume a simplified scenario with two object files:",
    "# file1.o contains function 'func1' and calls 'func2'",
    "# file2.o contains function 'func2'",
    "# Linking them:",
    "ld -o myprogram file1.o file2.o",
    "# Examining file1.o's symbol table (using a tool like objdump -t file1.o):",
    "# ...output showing symbol names, addresses and types...",
    "# Examining myprogram's final linked image (using a tool like objdump -t myprogram):",
    "# ...output showing resolved symbols with final memory addresses...",
    "# Note: Actual command and output format will vary based on OS and tools."
  ],
  "example_explanation": "The example demonstrates the linking process.  `ld` (the linker) takes object files (`file1.o`, `file2.o`) as input.  `file1.o` contains a reference to `func2`, which is defined in `file2.o`. The linker uses the symbol tables within the object files to resolve this reference, meaning it finds the address of `func2` in `file2.o` and updates the call to `func2` in `file1.o` with this correct address. The resulting executable (`myprogram`) contains the combined code from both object files with all symbol references properly resolved.  `objdump` is a tool to examine object files and executables and displays information like section headers and symbol tables, showing the result of the symbol resolution process.",
  "extraction_metadata": {
    "source": "Linkers and Loaders",
    "page_range": "120-120",
    "extraction_date": "2025-07-18T01:49:45.972474",
    "has_code": false,
    "has_explanation": true,
    "book_context": "linkers_loaders"
  }
}