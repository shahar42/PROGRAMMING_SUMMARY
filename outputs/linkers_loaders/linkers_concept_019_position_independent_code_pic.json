{
  "topic": "Position Independent Code (PIC)",
  "explanation": "Position Independent Code (PIC) is a programming technique that allows code to be loaded and executed at any memory address without requiring modification.  This is crucial for shared libraries (DLLs, .so files) because multiple programs might load the same library concurrently, each requiring it at a different address in their own memory space.  Without PIC, the library would need to be relocated for each program, impacting performance and potentially causing conflicts.",
  "syntax": "PIC typically involves the use of relative addressing, base registers, and global offset tables (GOT) or procedure linkage tables (PLT) to manage references to global data and external functions. The exact implementation varies depending on the architecture (e.g., x86, ARM, SPARC).",
  "code_example": [
    "#include <stdio.h>",
    "int global_var = 10;",
    "void my_function() {",
    "  printf(\"Global variable value: %d\\n\", global_var);",
    "}",
    "int main() {",
    "  my_function();",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This simple C example demonstrates the fundamental concept.  The `global_var` is a global variable.  The compiler, when generating PIC code for `my_function`, wouldn't directly use the absolute memory address of `global_var`. Instead, it would generate code using relative addressing or through a mechanism like a GOT to locate `global_var` regardless of where the shared library containing `my_function` is loaded in memory.  Similarly, a call to `printf` (an external function) would use a mechanism like PLT to indirectly resolve the function's address. The loader, during the linking and loading process, resolves the addresses correctly for each program loading the shared library.",
  "extraction_metadata": {
    "source": "Linkers and Loaders",
    "page_range": "61-63",
    "extraction_date": "2025-07-16T12:07:40.304131",
    "has_code": false,
    "has_explanation": true,
    "book_context": "linkers_loaders"
  }
}