{
  "topic": "Symbol Resolution",
  "explanation": "Symbol resolution is the process of associating symbolic names (like function or variable names) used in a program's source code with their actual memory addresses during the linking and loading process.  It's crucial because the compiler and assembler generate code with symbolic references, not absolute memory addresses.  The linker and loader resolve these symbols by matching them to their definitions found in object files and libraries, enabling different parts of the program to communicate effectively. This ensures that function calls, variable accesses, and data references all work correctly when the program executes.",
  "syntax": "No single standardized syntax, but generally involves the linker processing symbol tables (e.g., .symtab in ELF) from input object files and libraries, comparing symbols exported from one object file to those imported by others, and assigning addresses based on the program's layout in memory.  Errors occur if unresolved symbols (undefined references) exist.",
  "code_example": [
    "#include <stdio.h>",
    "",
    "void my_function(void);",
    "",
    "int main(void) {",
    "  my_function();",
    "  return 0;",
    "}",
    "",
    "void my_function(void) {",
    "  printf(\"Hello from my_function!\\n\");",
    "}"
  ],
  "example_explanation": "This simple C program demonstrates symbol resolution.  The `main` function calls `my_function`.  During compilation, each function is compiled into its own object file (.o). The compiler doesn't know the exact address of `my_function` when compiling `main`. The linker resolves this by searching the symbol tables of the object files created by the compiler. It finds the definition of `my_function` in its object file and updates the call in `main` to use the correct memory address of `my_function` during the linking process.  The loader then loads this resolved code into memory for execution.  If `my_function` were not defined in any of the linked object files or libraries, the linker would report an 'undefined symbol' error, indicating a failure in symbol resolution.",
  "extraction_metadata": {
    "source": "Linkers and Loaders",
    "page_range": "120-120",
    "extraction_date": "2025-07-18T01:49:40.850835",
    "has_code": false,
    "has_explanation": false,
    "book_context": "linkers_loaders"
  }
}