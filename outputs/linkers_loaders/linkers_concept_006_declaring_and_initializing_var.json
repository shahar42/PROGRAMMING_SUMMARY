{
  "topic": "Declaring and Initializing Variables",
  "explanation": "Variables are named storage locations in a program's memory used to hold data.  Declaring a variable tells the compiler its name and data type, reserving space in memory. Initialization assigns an initial value to the variable at the time of declaration. This is crucial for ensuring the program starts with predictable data, avoiding unexpected behavior from uninitialized variables.",
  "syntax": "data_type variable_name = initial_value;",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int main() {",
    "  int age = 30;  // Declares an integer variable 'age' and initializes it to 30",
    "  float price = 99.99; // Declares a float variable 'price' and initializes it to 99.99",
    "  char initial = 'J'; // Declares a character variable 'initial' and initializes it to 'J'",
    "",
    "  printf(\"Age: %d\\n\", age);",
    "  printf(\"Price: %.2f\\n\", price);",
    "  printf(\"Initial: %c\\n\", initial);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This program demonstrates variable declaration and initialization.  Three variables are declared: 'age' (integer), 'price' (floating-point), and 'initial' (character). Each is initialized with a value upon declaration. The `printf` statements then display the values of these variables, confirming that the initialization worked correctly.  The output shows the initial values assigned to each variable.",
  "extraction_metadata": {
    "source": "Linkers and Loaders",
    "page_range": "16-16",
    "extraction_date": "2025-07-13T00:59:07.869785",
    "has_code": false,
    "has_explanation": false
  }
}