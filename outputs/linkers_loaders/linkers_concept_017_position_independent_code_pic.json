{
  "topic": "Position Independent Code (PIC)",
  "explanation": "Position Independent Code (PIC) is a code generation technique that produces executable code whose address is not fixed at compile time.  This is crucial for shared libraries (like DLLs on Windows or .so files on Linux) because multiple programs might load the same shared library into different memory locations simultaneously.  PIC allows the same library code to execute correctly regardless of its load address, avoiding the need to relocate the code every time it's loaded. This eliminates the problems associated with fixed address assignment for shared libraries, such as address space conflicts and the need for extensive relinking when library versions change.",
  "syntax": "The exact syntax depends on the compiler and architecture (e.g., using special instructions or compiler directives to access global variables and functions through indirect addressing).  Generally, PIC uses techniques like the Global Offset Table (GOT) and Procedure Linkage Table (PLT) to resolve addresses at runtime.",
  "code_example": [
    "#include <stdio.h>",
    "int global_var = 10;",
    "void my_function() {",
    "  printf(\"Global var: %d\\n\", global_var);",
    "}",
    "int main() {",
    "  my_function();",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This simple C example, when compiled with PIC enabled (e.g., using the `-fPIC` flag with GCC), will generate position-independent code.  While the example itself doesn't explicitly show GOT or PLT manipulation, the compiler will ensure that accesses to `global_var` and the call to `my_function` are handled through mechanisms that work regardless of the load address of the resulting executable or shared library. If this code were part of a shared library, multiple programs could load it into their address spaces without conflicts because the addresses are resolved at runtime through the GOT/PLT mechanisms, not fixed at compile time.",
  "extraction_metadata": {
    "source": "Linkers and Loaders",
    "page_range": "61-61",
    "extraction_date": "2025-07-16T12:07:33.484680",
    "has_code": false,
    "has_explanation": false,
    "book_context": "linkers_loaders"
  }
}