{
  "topic": "Variable Declaration and Initialization in C",
  "explanation": "Variables are named storage locations in a C program that hold data.  They must be declared before use, specifying their data type. Initialization assigns an initial value to the variable at the time of declaration. This is crucial for managing data within a program and preventing unexpected behavior caused by uninitialized variables.",
  "syntax": "dataType variableName = initialValue;",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int main() {",
    "  int age = 30; // Declare an integer variable 'age' and initialize it to 30",
    "  float price = 99.99; // Declare a float variable 'price' and initialize it to 99.99",
    "  char initial = 'J'; // Declare a character variable 'initial' and initialize it to 'J'",
    "",
    "  printf(\"Age: %d\\n\", age);",
    "  printf(\"Price: %f\\n\", price);",
    "  printf(\"Initial: %c\\n\", initial);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates declaring and initializing three variables of different data types: an integer (`age`), a floating-point number (`price`), and a character (`initial`). Each variable is given an initial value directly at the point of declaration. The `printf` statements then show how to access and display the values stored in these variables.",
  "extraction_metadata": {
    "source": "Linkers and Loaders",
    "page_range": "2-2",
    "extraction_date": "2025-07-13T00:41:46.382592",
    "has_code": false,
    "has_explanation": false
  }
}