{
  "topic": "Function Calls",
  "explanation": "Function calls are the mechanism in C to invoke or use pre-defined or user-defined blocks of code.  They promote modularity, reusability, and readability by breaking down complex tasks into smaller, manageable functions.  The caller provides input arguments (if any) and the function returns a value (or void if nothing is returned).",
  "syntax": "return_type function_name(parameter_type parameter1, parameter_type parameter2, ...);\n\n//In the function definition:\nreturn_type function_name(parameter_type parameter1, parameter_type parameter2, ...){\n  // Function body\n  return value;\n}",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int add(int a, int b) {",
    "  return a + b;",
    "}",
    "",
    "int main() {",
    "  int sum = add(5, 3);",
    "  printf(\"The sum is: %d\\n\", sum);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates a function call. The `add` function is defined to take two integers as input and return their sum.  The `main` function calls `add` with arguments 5 and 3. The returned value (8) is stored in the `sum` variable and then printed to the console. This showcases how a function can be defined separately and then called from another function to perform a specific task.",
  "extraction_metadata": {
    "source": "Linkers and Loaders",
    "page_range": "16-16",
    "extraction_date": "2025-07-13T00:59:10.808849",
    "has_code": false,
    "has_explanation": true
  }
}