{
  "topic": "Operator Precedence and Short-Circuit Evaluation in C",
  "explanation": "In advanced C programming, understanding the nuanced precedence and behavior of bitwise versus logical operators is crucial for writing correct and efficient code. Historically, C's operator precedence was designed to distinguish between bitwise operations (&, |) and logical short-circuit evaluations (&&, ||). Misunderstanding or misusing these operators can lead to subtle bugs, especially in complex expressions. Mastery involves knowing how precedence affects evaluation order, especially in complex conditional statements, and how to leverage or override default precedence to ensure correct logic flow.",
  "syntax": "Expression involving bitwise and logical operators:\n\nresult = expression1 & expression2;\nresult = expression1 && expression2;\n\nPrecedence rules:\n- && and || have lower precedence than ==, & and |.\n- & and | have higher precedence than ==.\n\nParentheses can be used to explicitly specify evaluation order.",
  "code_example": [
    "int result = (a == b) & (c == d); // Bitwise AND applied after equality checks",
    "if (a == b & c == d) { // Ambiguous: '&' has higher precedence than '==', so interpreted as 'a == (b & c) == d'",
    "if ((a == b) && (c == d)) { // Correct logical evaluation with short-circuiting",
    "if (a == b && c == d) { // Same as above, clearer and preferred"
  ],
  "example_explanation": "This example demonstrates how operator precedence affects evaluation. The first line shows a bitwise AND between two equality comparisons, which can produce unexpected results if misunderstood. The second line illustrates a common pitfall where '&' has higher precedence than '==', leading to potentially incorrect logic. The third and fourth lines show the correct use of parentheses and logical operators to ensure proper short-circuit evaluation, highlighting the importance of understanding precedence rules in advanced C programming.",
  "extraction_metadata": {
    "source": "Expert C Programming: Deep C Secrets",
    "page_range": "46-47",
    "extraction_date": "2025-07-16T23:00:27.207605",
    "has_code": true,
    "has_explanation": true,
    "book_context": "expert_c_programming"
  }
}