{
  "topic": "Complex Declaration Parsing and Name Shadowing in C",
  "explanation": "In advanced C programming, understanding how complex declarations are parsed and how name shadowing affects variable and type resolution is crucial. Such declarations can lead to subtle bugs and confusion, especially when variable names shadow type names or when multiple declarations intertwine. Mastery of declaration precedence rules and shadowing behavior enables developers to write clearer, more maintainable code and to diagnose tricky compiler errors or undefined behaviors.",
  "syntax": "struct <tag> { ... } <variable_name>;\n// or\n<type_specifier> <declarator>;\n// where declarator can include pointers, arrays, functions, and nested declarations, possibly shadowing type names",
  "code_example": [
    "struct foo { int foo; } foo;",
    "sizeof(foo); // What does this evaluate to?",
    "struct bar { int bar; } bar;",
    "struct foo { int new_member; }; // Shadowing previous 'struct foo'",
    "int main() {",
    "    struct foo { int shadowed; } foo; // Shadowing the previous 'struct foo'",
    "    return sizeof(foo);",
    "}"
  ],
  "example_explanation": "This example demonstrates how complex declarations can lead to shadowing and confusion. The first line declares a struct 'foo' and a variable 'foo' of that type, which can be confusing because the variable name shadows the type name. The 'sizeof(foo)' refers to the variable, not the type, illustrating how declaration context affects interpretation. Later, redefining 'struct foo' inside a function shadows the outer 'struct foo', showing how nested declarations and name shadowing can complicate understanding and maintenance of code. This highlights the importance of mastering declaration syntax and scope rules in advanced C programming.",
  "extraction_metadata": {
    "source": "Expert C Programming: Deep C Secrets",
    "page_range": "76-76",
    "extraction_date": "2025-07-18T01:47:43.089807",
    "has_code": true,
    "has_explanation": true,
    "book_context": "expert_c_programming"
  }
}