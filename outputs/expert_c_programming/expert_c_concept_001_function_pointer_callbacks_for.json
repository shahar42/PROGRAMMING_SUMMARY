{
  "topic": "Function Pointer Callbacks for Dynamic Behavior",
  "explanation": "In advanced C programming, function pointers are used to implement callback mechanisms that enable dynamic, flexible behavior at runtime. This technique allows functions to be passed as arguments, facilitating event-driven programming, plugin architectures, or customizable algorithms without hardcoding specific function calls. Mastering function pointer callbacks is essential for writing modular, extensible, and high-performance C code that can adapt to different contexts or user-defined behaviors.",
  "syntax": "return_type (*function_pointer_name)(parameter_types); // Declaration of a function pointer\n\n// Assigning a function to the pointer\nfunction_pointer_name = &function_name; // or simply function_name\n\n// Invoking the callback\nresult = (*function_pointer_name)(arguments); // or function_pointer_name(arguments);",
  "code_example": [
    "typedef int (*CompareFunc)(const void *, const void *);",
    "",
    "int compare_ints(const void *a, const void *b) {",
    "    int arg1 = *(const int *)a;",
    "    int arg2 = *(const int *)b;",
    "    return (arg1 > arg2) - (arg1 < arg2);",
    "}",
    "",
    "void sort_with_callback(int *array, size_t size, CompareFunc cmp) {",
    "    // Use qsort with the callback function",
    "    qsort(array, size, sizeof(int), cmp);",
    "}",
    "",
    "int main() {",
    "    int data[] = {5, 2, 9, 1};",
    "    // Pass the compare_ints function as a callback",
    "    sort_with_callback(data, 4, compare_ints);",
    "    // data is now sorted",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates defining a function pointer type 'CompareFunc' for comparison functions, assigning a specific comparison function 'compare_ints' to it, and passing it as a callback to 'sort_with_callback'. The callback mechanism allows 'qsort' to use the user-defined comparison function at runtime, exemplifying advanced use of function pointers for flexible, reusable code. This technique is crucial in scenarios requiring customizable behavior, such as sorting with different criteria or event handling in complex systems.",
  "extraction_metadata": {
    "source": "Expert C Programming: Deep C Secrets",
    "page_range": "2-2",
    "extraction_date": "2025-07-14T01:25:57.313611",
    "has_code": false,
    "has_explanation": false,
    "book_context": "expert_c_programming"
  }
}