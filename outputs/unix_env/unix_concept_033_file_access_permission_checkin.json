{
  "topic": "File Access Permission Checking",
  "explanation": "File access permission checking is a system-level process where the kernel verifies if a process can access a file based on the file's ownership (user ID and group ID) and the process's effective IDs. It is used to enforce security and control access in Unix-like systems, ensuring that only authorized processes can read, write, or execute files by evaluating permission bits in a specific order.",
  "syntax": "int access(const char *pathname, int mode);",
  "code_example": [
    "#include <stdio.h>",
    "#include <unistd.h>",
    "int main() {",
    "    if (access(\"example.txt\", R_OK) == 0) {",
    "        printf(\"Access granted: File can be read.\\n\");",
    "    } else {",
    "        printf(\"Access denied: File cannot be read.\\n\");",
    "    }",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example uses the access function to check if 'example.txt' can be read (R_OK mode), demonstrating how the system performs permission checks based on the file's ownership and the process's effective IDs. If access is granted, it prints a success message; otherwise, it indicates denial, illustrating the core logic of sequential permission testing.",
  "extraction_metadata": {
    "source": "Advanced Programming in the UNIX Environment 3rd Edition",
    "page_range": "135-135",
    "extraction_date": "2025-07-18T00:55:40.244259",
    "has_code": false,
    "has_explanation": false
  }
}