{
  "topic": "read() Function",
  "explanation": "The read() function in C is a system call that reads a specified number of bytes from a file descriptor into a memory buffer. It is used for low-level input operations, such as reading from files, standard input, or other devices, providing efficient and direct access to system resources in POSIX environments.",
  "syntax": "ssize_t read(int fd, void *buf, size_t count)",
  "code_example": [
    "#include <unistd.h>",
    "#include <stdio.h>",
    "",
    "int main() {",
    "    char buffer[100];",
    "    ssize_t bytes_read = read(0, buffer, sizeof(buffer) - 1);",
    "    if (bytes_read > 0) {",
    "        buffer[bytes_read] = '\\0';  // Null-terminate the string",
    "        printf(\"%s\", buffer);",
    "    }",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This program uses the read() function to read up to 99 bytes from standard input (file descriptor 0) into the buffer array. It then null-terminates the read data and prints it using printf(), demonstrating how read() retrieves input data and handles the number of bytes read in a simple, self-contained manner.",
  "extraction_metadata": {
    "source": "Advanced Programming in the UNIX Environment 3rd Edition",
    "page_range": "105-105",
    "extraction_date": "2025-07-16T12:06:25.703007",
    "has_code": false,
    "has_explanation": false
  }
}