{
  "topic": "Reliable Signals in C",
  "explanation": "Reliable signals in C refer to a mechanism for handling asynchronous events, such as interrupts or errors, in a way that ensures signals are not lost or duplicated. They are used to improve the robustness of programs by providing more control over signal delivery and handling compared to basic signal functions, which can lead to unreliable behavior in multi-threaded or concurrent environments. This concept is essential for writing safe system-level code that responds predictably to external events.",
  "syntax": "struct sigaction sa;\n sa.sa_handler = handler_function;  // Pointer to the signal handler function\n sa.sa_flags = 0;  // Flags for reliable behavior, e.g., SA_RESTART or SA_SIGINFO\n sigemptyset(&sa.sa_mask);  // Initialize the signal mask\n sigaction(signal_number, &sa, NULL);  // Install the signal handler",
  "code_example": [
    "#include <stdio.h>",
    "#include <signal.h>",
    "#include <unistd.h>",
    "",
    "void handle_signal(int sig) {",
    "    printf(\"Received signal %d\\n\", sig);",
    "}",
    "",
    "int main() {",
    "    struct sigaction sa;",
    "    sa.sa_handler = handle_signal;  // Set the handler function",
    "    sigemptyset(&sa.sa_mask);  // Clear the signal mask",
    "    sa.sa_flags = 0;  // No special flags for basic reliability",
    "    if (sigaction(SIGINT, &sa, NULL) == -1) {  // Handle SIGINT (e.g., Ctrl+C)",
    "        perror(\"sigaction failed\");",
    "        return 1;",
    "    }",
    "    printf(\"Running... Press Ctrl+C to trigger signal\\n\");",
    "    while (1) {  // Infinite loop to keep the program running",
    "        sleep(1);",
    "    }",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates reliable signals by using the sigaction function to register a handler for the SIGINT signal (generated by Ctrl+C). When SIGINT is received, the handle_signal function is called, printing a message with the signal number. This shows reliability because sigaction ensures the signal is handled without loss, unlike the basic signal() function, which might have issues in complex scenarios. The program runs in an infinite loop, allowing you to test it by interrupting with Ctrl+C.",
  "extraction_metadata": {
    "source": "Advanced Programming in the UNIX Environment 3rd Edition",
    "page_range": "16-16",
    "extraction_date": "2025-07-13T00:33:24.850339",
    "has_code": false,
    "has_explanation": false
  }
}