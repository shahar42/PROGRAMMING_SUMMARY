{
  "topic": "The restrict Keyword",
  "explanation": "The restrict keyword in C is a type qualifier applied to pointers that informs the compiler that the pointer is the only means of accessing the object it points to within the scope of the pointer's use. It is used to enable compiler optimizations, such as improved code generation for aliasing scenarios, by assuring that no other pointers or references will access the same memory location, which can lead to faster and more efficient code execution.",
  "syntax": "void func(int * restrict ptr);",
  "code_example": [
    "#include <stdio.h>",
    "",
    "void add_one(int * restrict p) {",
    "    (*p)++;",
    "}",
    "",
    "int main() {",
    "    int x = 5;",
    "    add_one(&x);",
    "    printf(\"%d\\n\", x);",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example defines a function add_one that takes a restrict-qualified pointer to an integer, increments the value it points to, and returns. In main, we initialize an integer x to 5, pass its address to add_one, and then print x, which becomes 6. The restrict keyword demonstrates its purpose by allowing the compiler to optimize the function, assuming no other pointers access x during the operation, thus showing how it aids in performance without altering the program's behavior.",
  "extraction_metadata": {
    "source": "Advanced Programming in the UNIX Environment 3rd Edition",
    "page_range": "60-60",
    "extraction_date": "2025-07-13T00:58:01.990420",
    "has_code": true,
    "has_explanation": true
  }
}