{
  "topic": "open() System Call",
  "explanation": "The open() system call is a fundamental function in Unix-like systems that allows a program to open or create a file. It returns a file descriptor, which is an integer used to reference the file for subsequent operations like reading or writing. This concept is essential in C programming for file I/O because it provides a low-level interface to interact with the file system, enabling programs to access files in a controlled manner while handling errors gracefully.",
  "syntax": "int open(const char *pathname, int flags, mode_t mode);",
  "code_example": [
    "#include <fcntl.h>",
    "#include <stdio.h>",
    "#include <unistd.h>",
    "",
    "int main() {",
    "    int fd = open(\"example.txt\", O_RDONLY);",
    "    if (fd == -1) {",
    "        perror(\"Error opening file\");",
    "        return 1;",
    "    }",
    "    // File is now open; you can perform operations here",
    "    close(fd);  // Good practice to close the file",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates the open() system call by attempting to open a file named 'example.txt' in read-only mode (O_RDONLY). If the file opens successfully, it returns a file descriptor (stored in 'fd'); otherwise, it prints an error message using perror() and exits. The close() function is then used to release the file descriptor, showing proper resource management and illustrating how open() integrates into a simple C program for file access.",
  "extraction_metadata": {
    "source": "Advanced Programming in the UNIX Environment 3rd Edition",
    "page_range": "31-31",
    "extraction_date": "2025-07-13T00:37:12.284620",
    "has_code": false,
    "has_explanation": true
  }
}