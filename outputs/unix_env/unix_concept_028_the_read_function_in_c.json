{
  "topic": "The read() Function in C",
  "explanation": "The read() function in C is a system call used to read data from a file descriptor into a buffer. It is essential for input operations in Unix-like systems, allowing programs to read from files, devices, pipes, or networks. It returns the number of bytes read, 0 if the end of the file is reached, or -1 if an error occurs, helping programs handle data input reliably and manage various edge cases like partial reads.",
  "syntax": "int read(int fd, char *buf, unsigned nbytes);",
  "code_example": [
    "#include <unistd.h>",
    "#include <stdio.h>",
    "int main() {",
    "    char buffer[10];",
    "    int bytesRead = read(0, buffer, 10);  // Read up to 10 bytes from stdin (file descriptor 0)",
    "    if (bytesRead > 0) {",
    "        write(1, buffer, bytesRead);  // Write the read bytes to stdout (file descriptor 1)",
    "    }",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates the read() function by reading up to 10 bytes from standard input (file descriptor 0) into a buffer. It then writes the read bytes to standard output using write(). The return value of read() (stored in bytesRead) indicates the number of bytes actually read, showing how the function handles input and potential partial reads, while keeping the program simple and focused on read() alone.",
  "extraction_metadata": {
    "source": "Advanced Programming in the UNIX Environment 3rd Edition",
    "page_range": "105-105",
    "extraction_date": "2025-07-16T12:06:42.118811",
    "has_code": true,
    "has_explanation": true
  }
}