{
  "topic": "Function Definition and Call",
  "explanation": "Functions are fundamental building blocks in C programming. They encapsulate a block of code that performs a specific task.  This promotes modularity, reusability, and code organization. Functions allow you to break down complex problems into smaller, manageable parts, making your code easier to understand, debug, and maintain.  A function definition specifies the function's return type, name, arguments, and the code it executes. A function call invokes the execution of that defined function.",
  "syntax": "return-type function-name(argument-type arg1, argument-type arg2, ...){ \n  // Function body: statements to be executed\n  return value; \n}",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int add(int a, int b) {",
    "  return a + b;",
    "}",
    "",
    "int main() {",
    "  int sum = add(5, 3);",
    "  printf(\"The sum is: %d\\n\", sum);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example defines a function called `add` that takes two integer arguments (`a` and `b`) and returns their sum as an integer. The `main` function then calls the `add` function with arguments 5 and 3. The returned value (8) is stored in the `sum` variable and printed to the console. This demonstrates how a function is defined, its parameters are passed during the function call, and how the returned value is used in the calling function.  The `main` function acts as the entry point of execution, illustrating how other functions are integrated and invoked in a C program.",
  "extraction_metadata": {
    "source": "Unknown Source",
    "page_range": "61-61",
    "extraction_date": "2025-07-14T01:34:43.760257",
    "has_code": true,
    "has_explanation": true,
    "book_context": "c_programming"
  }
}