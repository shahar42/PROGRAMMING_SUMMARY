{
  "topic": "Arrays of Pointers",
  "explanation": "In C, an array of pointers allows you to store multiple pointers, each pointing to a different data structure (like a string or another data type). This is particularly useful for managing collections of dynamically allocated data or strings of varying lengths, avoiding the limitations of fixed-size arrays.  It's fundamental to handling variable-length data efficiently in C.",
  "syntax": "data_type *array_name[array_size];",
  "code_example": [
    "#include <stdio.h>",
    "#include <stdlib.h>",
    "#define MAXLINES 5",
    "int main() {",
    "  char *lineptr[MAXLINES];",
    "  lineptr[0] = (char *) malloc(100 * sizeof(char));",
    "  strcpy(lineptr[0], \"This is line 1.\");",
    "  lineptr[1] = (char *) malloc(50 * sizeof(char));",
    "  strcpy(lineptr[1], \"Line 2.\");",
    "  // ... allocate and copy more lines ...",
    "  for (int i = 0; i < 2; i++) {",
    "    printf(\"%s\\n\", lineptr[i]);",
    "    free(lineptr[i]);",
    "  }",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example declares `lineptr`, an array of 5 character pointers. Each element of `lineptr` can point to a dynamically allocated string.  The example allocates memory for two strings using `malloc`, copies strings into them using `strcpy`, prints them using the array indexing, and then releases the dynamically allocated memory using `free`. This demonstrates the power of using an array of pointers to handle a collection of strings, where each string can have a different length.",
  "extraction_metadata": {
    "source": "Unknown Source",
    "page_range": "91-91",
    "extraction_date": "2025-07-16T23:01:29.058073",
    "has_code": true,
    "has_explanation": true,
    "book_context": "c_programming"
  }
}