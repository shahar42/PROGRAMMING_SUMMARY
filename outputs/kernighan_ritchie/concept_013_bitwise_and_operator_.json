{
  "topic": "Bitwise AND Operator (&)",
  "explanation": "The bitwise AND operator compares corresponding bits of two integer operands. If both bits are 1, the resulting bit is 1; otherwise, it's 0.  It's used for masking: selecting specific bits within an integer while leaving others unchanged.",
  "syntax": "result = operand1 & operand2;",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int main() {",
    "  unsigned int x = 0b11001010;",
    "  unsigned int mask = 0b00001111;",
    "  unsigned int result = x & mask;",
    "  printf(\"x: 0x%X\\n\", x);",
    "  printf(\"mask: 0x%X\\n\", mask);",
    "  printf(\"result: 0x%X\\n\", result);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This code demonstrates the bitwise AND.  'x' represents an integer, and 'mask' selects the rightmost four bits. The bitwise AND operation ('&') applies the mask to 'x', resulting in 'result' containing only the rightmost four bits of 'x', with the other bits set to 0. The output shows the hexadecimal representation of each variable to clearly visualize the bit manipulation.",
  "extraction_metadata": {
    "source": "The C Programming Language - Kernighan & Ritchie",
    "page_range": "46-46",
    "extraction_date": "2025-07-13T23:19:51.637446",
    "has_code": true,
    "has_explanation": true
  }
}