{
  "topic": "Bitwise AND Operator",
  "explanation": "The bitwise AND operator (&) compares corresponding bits of two integer operands. If both bits are 1, the resulting bit is 1; otherwise, it's 0.  It's used for masking: selecting specific bits within an integer while preserving others.",
  "syntax": "result = operand1 & operand2;",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int main() {",
    "  unsigned int x = 0b11001010;",
    "  unsigned int mask = 0b00001111;",
    "  unsigned int result = x & mask;",
    "  printf(\"Original: 0x%X\\n\", x);",
    "  printf(\"Mask: 0x%X\\n\", mask);",
    "  printf(\"Result: 0x%X\\n\", result);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This program demonstrates the bitwise AND.  The variable `x` holds a value. The `mask` selects only the lower four bits. The bitwise AND operation (`&`) applies the mask, resulting in `result` containing only the lower four bits of `x`, while the rest are zeroed out. The hexadecimal output aids in visualizing the bit manipulation.",
  "extraction_metadata": {
    "source": "The C Programming Language - Kernighan & Ritchie",
    "page_range": "46-46",
    "extraction_date": "2025-07-12T03:12:49.580644",
    "has_code": true,
    "has_explanation": true
  }
}
