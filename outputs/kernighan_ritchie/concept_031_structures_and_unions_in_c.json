{
  "topic": "Structures and Unions in C",
  "explanation": "Structures and unions are user-defined data types in C that allow grouping of variables of different data types under a single name.  Structures group variables of potentially different types into a single unit, while unions allow multiple variables to share the same memory location. Structures are used when you need to represent a collection of related data items, each with its own type and name, while unions are used when you need to store different types of data in the same memory location at different times, but only one at a time. This is crucial for memory efficiency or representing data with alternative interpretations.",
  "syntax": "Structures:\nstruct structure_name {\n  data_type member1;\n  data_type member2;\n  ...\n};\n\nUnions:\nunion union_name {\n  data_type member1;\n  data_type member2;\n  ...\n};",
  "code_example": [
    "#include <stdio.h>",
    "struct Person {",
    "  char *name;",
    "  int age;",
    "};",
    "",
    "union Data {",
    "  int i;",
    "  float f;",
    "};",
    "",
    "int main() {",
    "  struct Person person1 = { \"John Doe\", 30 };",
    "  printf(\"Name: %s, Age: %d\\n\", person1.name, person1.age);",
    "",
    "  union Data data;",
    "  data.i = 10;",
    "  printf(\"Integer: %d\\n\", data.i);",
    "  data.f = 3.14f;",
    "  printf(\"Float: %f\\n\", data.f);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates both structures and unions. The `struct Person` groups a character pointer (name) and an integer (age) to represent a person.  The `union Data` shows how the same memory location can hold either an integer or a float. Note that accessing a union member after assigning to another member might lead to unexpected results as they are sharing the same memory.",
  "extraction_metadata": {
    "source": "Unknown Source",
    "page_range": "121-121",
    "extraction_date": "2025-07-18T00:55:21.607311",
    "has_code": true,
    "has_explanation": true,
    "book_context": "c_programming"
  }
}