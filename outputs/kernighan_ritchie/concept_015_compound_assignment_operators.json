{
  "topic": "Compound Assignment Operators",
  "explanation": "Compound assignment operators in C combine an arithmetic or bitwise operation with an assignment.  They provide a shorter, more concise way to update a variable's value by performing an operation on its current value. This improves code readability and can sometimes lead to slightly more efficient code because the left-hand operand is only evaluated once.",
  "syntax": "variable op= expression;",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int main() {",
    "  int x = 5;",
    "  x += 3;  // Equivalent to x = x + 3",
    "  printf(\"x after +=: %d\\n\", x);",
    "  x -= 2;  // Equivalent to x = x - 2",
    "  printf(\"x after -=: %d\\n\", x);",
    "  x *= 4;  // Equivalent to x = x * 4",
    "  printf(\"x after *=: %d\\n\", x);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This program demonstrates several compound assignment operators.  It initializes an integer variable `x` to 5. Then, it uses `+=`, `-=`, and `*=` to modify `x`'s value.  Each compound assignment is equivalent to a longer expression that explicitly performs the operation and assigns the result back to the variable. The `printf` statements show the value of `x` after each operation, illustrating the effect of the compound assignment operators.",
  "extraction_metadata": {
    "source": "The C Programming Language - Kernighan & Ritchie",
    "page_range": "46-46",
    "extraction_date": "2025-07-13T23:19:56.851077",
    "has_code": true,
    "has_explanation": true
  }
}