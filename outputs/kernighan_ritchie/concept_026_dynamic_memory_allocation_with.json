{
  "topic": "Dynamic Memory Allocation with malloc",
  "explanation": "In C, dynamic memory allocation allows you to request memory during program execution, as opposed to static allocation where memory is assigned at compile time.  This is crucial for handling data structures of unknown or variable size at runtime.  `malloc` is the primary function for this purpose; it allocates a block of memory of a specified size and returns a void pointer to the beginning of that block.  The programmer is then responsible for managing this allocated memory.",
  "syntax": "void *malloc(size_t size);",
  "code_example": [
    "#include <stdio.h>",
    "#include <stdlib.h>",
    "",
    "int main() {",
    "  int *dynamicArray; // Pointer to hold the memory address",
    "  int arraySize = 5;",
    "",
    "  // Allocate memory for 5 integers",
    "  dynamicArray = (int *)malloc(arraySize * sizeof(int));",
    "",
    "  if (dynamicArray == NULL) {",
    "    fprintf(stderr, \"Memory allocation failed!\n\");",
    "    return 1; // Indicate an error",
    "  }",
    "",
    "  // Initialize and use the dynamically allocated array",
    "  for (int i = 0; i < arraySize; i++) {",
    "    dynamicArray[i] = i * 10;",
    "  }",
    "",
    "  for (int i = 0; i < arraySize; i++) {",
    "    printf(\"dynamicArray[%d] = %d\\n\", i, dynamicArray[i]);",
    "  }",
    "",
    "  // Free the allocated memory to prevent memory leaks",
    "  free(dynamicArray);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates dynamic memory allocation using `malloc`.  First, a pointer `dynamicArray` is declared to store the memory address. Then, `malloc` is called to allocate enough memory to hold 5 integers (`arraySize * sizeof(int)`). The returned void pointer is type-casted to an `int *` and assigned to `dynamicArray`.  Error handling checks if `malloc` failed (returning NULL). The allocated memory is then used to store values and finally, `free` releases this memory, preventing a memory leak.  The example highlights the critical steps: allocation, error checking, usage, and deallocation of dynamically allocated memory.",
  "extraction_metadata": {
    "source": "Unknown Source",
    "page_range": "91-91",
    "extraction_date": "2025-07-16T23:01:00.487902",
    "has_code": true,
    "has_explanation": true,
    "book_context": "c_programming"
  }
}