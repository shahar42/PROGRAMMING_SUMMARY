{
  "topic": "Function Definition and Calls",
  "explanation": "Functions are fundamental building blocks in C programming. They encapsulate a block of code that performs a specific task, promoting modularity, reusability, and code organization.  Functions enable breaking down complex programs into smaller, manageable units, improving readability and maintainability.  They also support code reuse, avoiding redundant code by defining a function once and calling it multiple times.",
  "syntax": "return_type function_name(parameter_type parameter1, parameter_type parameter2, ...){ \n  // Function body: statements to execute \n  return value; \n}",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int add(int a, int b) {",
    "  return a + b;",
    "}",
    "",
    "int main() {",
    "  int sum = add(5, 3);",
    "  printf(\"The sum is: %d\\n\", sum);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example defines a function `add` that takes two integer parameters (`a` and `b`) and returns their sum as an integer. The `main` function calls `add` with arguments 5 and 3. The returned value (8) is stored in the `sum` variable and then printed to the console. This demonstrates the basic structure of a C function: its definition (including return type, name, parameters, and body) and its call from another function (here, `main`). The example highlights function modularity (the `add` function is separate from the main logic) and reusability (the `add` function could be called multiple times with different inputs).",
  "extraction_metadata": {
    "source": "Unknown Source",
    "page_range": "61-61",
    "extraction_date": "2025-07-14T01:34:46.730358",
    "has_code": true,
    "has_explanation": true,
    "book_context": "c_programming"
  }
}