{
  "topic": "Function Definition and Call",
  "explanation": "Functions are self-contained blocks of code that perform a specific task. They promote modularity, reusability, and code organization in C programs.  Functions are defined once and can be called multiple times from different parts of the program, avoiding code duplication and improving readability.  They allow for breaking down complex problems into smaller, manageable subproblems.",
  "syntax": "return_type function_name(parameter_type parameter1, parameter_type parameter2, ...){\n  // Function body: statements to perform the task\n  return value; // Return a value of the specified return_type\n}",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int add(int a, int b) {",
    "  return a + b;",
    "}",
    "",
    "int main() {",
    "  int x = 5, y = 10, sum;",
    "  sum = add(x, y);",
    "  printf(\"The sum of %d and %d is: %d\\n\", x, y, sum);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example defines a function `add` that takes two integer arguments (`a` and `b`) and returns their sum. The `main` function calls `add` with the variables `x` and `y` as arguments. The returned value (the sum) is stored in the `sum` variable and then printed to the console. This demonstrates how a function is defined, how arguments are passed to it, and how a return value is used. The modular nature of the code is apparent; the addition logic is encapsulated within the `add` function, making the main function more readable and easier to understand.",
  "extraction_metadata": {
    "source": "Unknown Source",
    "page_range": "137-138",
    "extraction_date": "2025-07-18T01:48:08.585895",
    "has_code": false,
    "has_explanation": false,
    "book_context": "c_programming"
  }
}