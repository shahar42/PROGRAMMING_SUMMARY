{
  "topic": "Unions",
  "explanation": "A union in C is a data structure that allows storing different data types in the same memory location.  Only one member of the union can hold a value at any given time.  This is useful when you need to represent a single variable that can hold one of several different types, saving memory compared to using separate variables for each type.  It's crucial to remember which data type is currently stored in the union to avoid errors.",
  "syntax": "union union_name {\n    data_type1 member1;\n    data_type2 member2;\n    ...\n    data_typeN memberN;\n};",
  "code_example": [
    "#include <stdio.h>",
    "",
    "union Data {",
    "    int ival;",
    "    float fval;",
    "    char sval[10];",
    "};",
    "",
    "int main() {",
    "    union Data u;",
    "",
    "    u.ival = 10;",
    "    printf(\"Integer value: %d\\n\", u.ival);",
    "",
    "    u.fval = 3.14f;",
    "    printf(\"Float value: %f\\n\", u.fval);",
    "",
    "    strcpy(u.sval, \"Hello\");",
    "    printf(\"String value: %s\\n\", u.sval);",
    "",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example defines a union named `Data` that can hold an integer (`ival`), a float (`fval`), or a string (`sval`). The `main` function demonstrates how to assign values to different members of the union and then access those values. Note that only one member holds a meaningful value at any time; writing to one member overwrites the previous member's contents.  The output shows the successful storage and retrieval of different data types within the same memory location occupied by the union.",
  "extraction_metadata": {
    "source": "Unknown Source",
    "page_range": "121-121",
    "extraction_date": "2025-07-18T00:55:25.560517",
    "has_code": true,
    "has_explanation": true,
    "book_context": "c_programming"
  }
}