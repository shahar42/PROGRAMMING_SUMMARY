{
  "topic": "Function Definitions and Calls",
  "explanation": "Functions are fundamental building blocks in C programming. They encapsulate a block of code that performs a specific task.  This promotes modularity, reusability, and code organization. Functions allow you to break down complex problems into smaller, manageable parts, making code easier to understand, debug, and maintain.  They communicate with each other through arguments passed during the call and a return value.",
  "syntax": "return_type function_name(parameter_type parameter1, parameter_type parameter2, ...){ \n  /* Function body: statements to be executed */\n  return expression; \n}",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int add(int a, int b) {",
    "  return a + b;",
    "}",
    "",
    "int main() {",
    "  int sum = add(5, 3);",
    "  printf(\"The sum is: %d\\n\", sum);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example defines a function `add` that takes two integer arguments (`a` and `b`) and returns their sum as an integer. The `main` function calls `add` with arguments 5 and 3. The returned value (8) is stored in the `sum` variable and then printed to the console. This demonstrates the basic structure of a function definition, including the return type, function name, parameters, function body, and the use of the `return` statement to send a value back to the calling function. The `main` function shows how to call a function and utilize its returned value.",
  "extraction_metadata": {
    "source": "Unknown Source",
    "page_range": "61-61",
    "extraction_date": "2025-07-14T01:34:49.700355",
    "has_code": true,
    "has_explanation": true,
    "book_context": "c_programming"
  }
}