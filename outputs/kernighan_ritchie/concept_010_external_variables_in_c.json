{
  "topic": "External Variables in C",
  "explanation": "External variables in C are declared outside of any function, making them globally accessible to all functions within the program.  This allows functions to share data without passing arguments, and the variables retain their values between function calls.  They are an alternative to automatic (local) variables which are created and destroyed with each function invocation.",
  "syntax": "/* Definition (appears only once outside any function) */\ndata_type variable_name;\n\n/* Declaration (appears in each function that uses the variable) */\nextern data_type variable_name;",
  "code_example": [
    "#include <stdio.h>",
    "#define MAXLINE 1000",
    "int max; /* maximum length seen so far */",
    "char line[MAXLINE]; /* current input line */",
    "char longest[MAXLINE]; /* longest line saved here */",
    "int getline(void) {",
    "    /* ... implementation ... */",
    "}",
    "void copy(void) {",
    "    /* ... implementation ... */",
    "}",
    "int main() {",
    "    /* ... implementation ... */",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates external variables.  `max`, `line`, and `longest` are declared outside of `main`, `getline`, and `copy`.  This means all three functions can directly access and modify these variables without passing them as arguments.  The values of these variables persist across function calls.",
  "extraction_metadata": {
    "source": "The C Programming Language - Kernighan & Ritchie",
    "page_range": "31-32",
    "extraction_date": "2025-07-13T00:57:44.450777",
    "has_code": true,
    "has_explanation": true
  }
}