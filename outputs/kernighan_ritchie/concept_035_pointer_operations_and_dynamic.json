{
  "topic": "Pointer Operations and Dynamic Memory Allocation",
  "explanation": "Pointers in C are variables that hold memory addresses.  Dynamic memory allocation allows a program to request memory during runtime, unlike statically allocated memory whose size is fixed at compile time.  `malloc` allocates a block of memory, and `free` releases it, preventing memory leaks. This is crucial for handling data structures whose size isn't known beforehand.",
  "syntax": "void *malloc(size_t size);\nvoid free(void *ptr);",
  "code_example": [
    "#include <stdio.h>",
    "#include <stdlib.h>",
    "struct node {",
    "  int data;",
    "  struct node *next;",
    "};",
    "",
    "int main() {",
    "  struct node *head = NULL, *p, *q;",
    "  // ... (code to populate linked list) ...",
    "  for (p = head; p != NULL; p = q) {",
    "    q = p->next;",
    "    free(p);",
    "  }",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates freeing dynamically allocated memory.  A linked list is created where each `node` is allocated using `malloc`.  The `for` loop iterates through the list. Inside the loop, `q` stores the next node's address. Then `free(p)` releases the memory occupied by the current node (`p`) before moving to the next one. This prevents memory leaks as the program deallocates all dynamically allocated nodes.",
  "extraction_metadata": {
    "source": "Unknown Source",
    "page_range": "136-136",
    "extraction_date": "2025-07-18T01:48:05.310921",
    "has_code": true,
    "has_explanation": true,
    "book_context": "c_programming"
  }
}