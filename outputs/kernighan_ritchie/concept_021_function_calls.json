{
  "topic": "Function Calls",
  "explanation": "Function calls are the mechanism in C to execute a block of reusable code.  They promote modularity, code reusability, and improved readability by breaking down complex tasks into smaller, manageable units.  A function is defined separately and then 'called' or invoked from other parts of the program to perform a specific operation.",
  "syntax": "return_type function_name(parameter_type parameter1, parameter_type parameter2, ...){\n  // Function body: statements to be executed\n  return value; \n}",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int max(int a, int b) {",
    "  return (a > b) ? a : b;",
    "}",
    "",
    "int main() {",
    "  int p = 10, q = 5, r = 20, s = 15;",
    "  int x = max(p + q, r + s);",
    "  printf(\"The maximum value is: %d\\n\", x);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example defines a function `max` that takes two integer arguments and returns the larger of the two.  The `main` function then calls `max`, passing the results of `p + q` and `r + s` as arguments. The `max` function computes the maximum and returns it.  The `main` function then prints the returned maximum value to the console. This demonstrates the fundamental concept of function definition and call in C, showcasing code reusability and modularity.",
  "extraction_metadata": {
    "source": "Unknown Source",
    "page_range": "76-76",
    "extraction_date": "2025-07-16T12:05:56.291163",
    "has_code": true,
    "has_explanation": true,
    "book_context": "c_programming"
  }
}