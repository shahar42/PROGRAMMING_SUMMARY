{
  "topic": "Process Creation with fork()",
  "explanation": "The `fork()` system call is fundamental to UNIX system programming. It creates a new process, a child process, that is an almost exact copy of the parent process.  This allows for concurrent execution of code, enabling parallel processing and inter-process communication (IPC). It's crucial for building multi-process applications, handling independent tasks simultaneously, and improving system performance.",
  "syntax": "pid_t fork(void); \n/* Returns 0 to the child, and the child's PID to the parent.  Returns -1 on error */",
  "code_example": [
    "#include <stdio.h>",
    "#include <unistd.h>",
    "#include <sys/types.h>",
    "",
    "int main() {",
    "  pid_t pid;",
    "  pid = fork();",
    "  if (pid < 0) {",
    "    fprintf(stderr, \"fork failed\\n\");",
    "    return 1;",
    "  }",
    "  else if (pid == 0) {",
    "    printf(\"I am the child process (PID: %d)\\n\", getpid());",
    "  } else {",
    "    printf(\"I am the parent process (PID: %d, Child PID: %d)\\n\", getpid(), pid);",
    "  }",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates the core functionality of `fork()`.  After the `fork()` call, two processes exist: the parent and the child. The `if` statement distinguishes between them. The child process receives a return value of 0 from `fork()`, while the parent receives the child's process ID. Each process then prints its own process ID (using `getpid()`), clearly showing the creation of a new, independent process. The output demonstrates two distinct processes executing concurrently.",
  "extraction_metadata": {
    "source": "Unknown Source",
    "page_range": "76-76",
    "extraction_date": "2025-07-16T12:06:06.841104",
    "has_code": true,
    "has_explanation": true,
    "book_context": "unix_programming"
  }
}