{
  "topic": "Symbolic Constants",
  "explanation": "Symbolic constants are named constants defined using the `#define` preprocessor directive.  They improve code readability and maintainability by replacing 'magic numbers' (hardcoded numerical values) with meaningful names.  Changes to the constant's value only need to be made in one place, reducing the risk of errors.",
  "syntax": "#define CONSTANT_NAME value",
  "code_example": [
    "#include <stdio.h>",
    "",
    "#define PI 3.14159",
    "#define RADIUS 10",
    "",
    "int main() {",
    "  float circumference = 2 * PI * RADIUS;",
    "  printf(\"Circumference of a circle with radius %d is: %f\\n\", RADIUS, circumference);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This program calculates the circumference of a circle.  `PI` and `RADIUS` are defined as symbolic constants using `#define`.  The program uses these constants in the calculation, making the code more readable and easier to understand. If the value of PI or RADIUS needs to be changed, it only needs to be updated in the `#define` statement.",
  "extraction_metadata": {
    "source": "The C Programming Language - Kernighan & Ritchie",
    "page_range": "2-5",
    "extraction_date": "2025-07-13T00:50:40.138191",
    "has_code": false,
    "has_explanation": false
  }
}