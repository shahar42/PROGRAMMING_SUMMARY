{
  "topic": "External Variables in C",
  "explanation": "External variables, declared with the `extern` keyword, allow you to access variables defined in other source files. This is crucial for modularity and code organization in larger C programs.  By declaring a variable as `extern`, you're telling the compiler that this variable exists elsewhere and has already been defined; you're not creating a new instance of it.  It's like creating a shared resource accessible from multiple parts of your program.",
  "syntax": "extern data_type variable_name;",
  "code_example": [
    "#include <stdio.h>",
    "int max = 0; // Definition of max in this file",
    "char longest[1000]; // Definition of longest in this file",
    "int getline() { /*Implementation of getline() would go here*/ return 10; }",
    "void copy() { /*Implementation of copy() would go here*/ }",
    "int main() {",
    "    extern int max;",
    "    extern char longest[];",
    "    int len;",
    "    while ((len = getline()) > 0) {",
    "        if (len > max) {",
    "            max = len;",
    "            copy();",
    "        }",
    "    }",
    "    if (max > 0)",
    "        printf(\"%s\", longest);",
    "    return 0;",
    "}"
  ],
  "example_explanation": "The `main` function uses `extern int max;` and `extern char longest[];` to declare that it will be using variables `max` and `longest` which are defined elsewhere (in this case, before `main()` in the same file).  The `main` function does not define or allocate memory for these variables, it simply declares its intention to use them. The actual definition (memory allocation and initial values) happens before `main()` in this example.  This demonstrates how `extern` allows accessing variables defined outside the current scope.",
  "extraction_metadata": {
    "source": "The C Programming Language - Kernighan & Ritchie",
    "page_range": "32-32",
    "extraction_date": "2025-07-13T00:57:47.819080",
    "has_code": true,
    "has_explanation": true
  }
}