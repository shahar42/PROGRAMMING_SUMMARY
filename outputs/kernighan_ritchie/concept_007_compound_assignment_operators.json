{
  "topic": "Compound Assignment Operators",
  "explanation": "Compound assignment operators in C combine an arithmetic or bitwise operation with an assignment. They provide a shorter, more efficient way to update a variable's value by performing an operation and assigning the result back to the same variable.  This improves code readability and can lead to slightly better performance because the variable is evaluated only once.",
  "syntax": "variable op= expression;",
  "code_example": [
    "#include <stdio.h>",
    "",
    "int main() {",
    "  int x = 5;",
    "  x += 2; // Equivalent to x = x + 2",
    "  printf(\"x after +=: %d\\n\", x);",
    "  x -= 1; // Equivalent to x = x - 1",
    "  printf(\"x after -=: %d\\n\", x);",
    "  x *= 3; // Equivalent to x = x * 3",
    "  printf(\"x after *=: %d\\n\", x);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "The example demonstrates three compound assignment operators: +=, -=, and *=.  It initializes an integer variable `x` to 5. Then, it adds 2, subtracts 1, and multiplies by 3 using their respective compound assignment operators. Each `printf` statement shows the value of `x` after each operation, illustrating how the variable is updated in place using the concise compound assignment syntax. The output clearly shows the effect of each operator on the variable's value.",
  "extraction_metadata": {
    "source": "The C Programming Language - Kernighan & Ritchie",
    "page_range": "46-46",
    "extraction_date": "2025-07-12T03:12:55.520350",
    "has_code": true,
    "has_explanation": true
  }
}