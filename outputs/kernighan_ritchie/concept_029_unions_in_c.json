{
  "topic": "Unions in C",
  "explanation": "A union in C is a data structure that allows you to store different data types in the same memory location.  Unlike structures, which allocate space for each member, a union allocates only enough space for its largest member. This is useful when you need to represent a value that can be one of several types, saving memory by avoiding redundant storage.  However, careful management is required because only one member can hold a valid value at any given time.  The programmer must track which member currently contains meaningful data.",
  "syntax": "union union_name {\n    data_type member1;\n    data_type member2;\n    // ... more members\n};",
  "code_example": [
    "#include <stdio.h>",
    "#include <string.h>",
    "union data {",
    "    int ival;",
    "    float fval;",
    "    char sval[20];",
    "};",
    "int main() {",
    "    union data u;",
    "    u.ival = 10;",
    "    printf(\"Integer value: %d\\n\", u.ival);",
    "    u.fval = 3.14f;",
    "    printf(\"Float value: %f\\n\", u.fval);",
    "    strcpy(u.sval, \"Hello\");",
    "    printf(\"String value: %s\\n\", u.sval);",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example defines a union named `data` that can hold an integer (`ival`), a float (`fval`), or a string (`sval`). The `main` function demonstrates storing and retrieving values of different types.  Note that after assigning a value to `ival`, accessing `fval` or `sval` would likely yield undefined behavior, and similarly for other members.  The example highlights the memory-saving aspect of unions, but also the need for careful type tracking to avoid errors.",
  "extraction_metadata": {
    "source": "Unknown Source",
    "page_range": "121-121",
    "extraction_date": "2025-07-18T00:55:14.642871",
    "has_code": true,
    "has_explanation": true,
    "book_context": "c_programming"
  }
}