{
  "topic": "Operator Precedence and Order of Evaluation",
  "explanation": "C, like many programming languages, has rules governing the order in which operators are evaluated in an expression. Understanding operator precedence and associativity is crucial to writing correct and predictable C code.  Incorrectly assuming evaluation order can lead to subtle and hard-to-find bugs. Precedence determines which operators are evaluated first, while associativity determines the order of evaluation for operators of the same precedence (e.g., left-to-right or right-to-left).",
  "syntax": "Operator precedence is defined by a hierarchy, with higher precedence operators evaluated before lower precedence ones.  Associativity specifies the evaluation order for operators with the same precedence (typically left-to-right, except for some like assignment).  Parentheses `()` can override the default precedence and associativity.",
  "code_example": [
    "#include <stdio.h>",
    "int main() {",
    "  int i = 5, j = 10, k;",
    "  k = i++ + j++; //Illustrates left-to-right associativity for +",
    "  printf(\"i = %d, j = %d, k = %d\\n\", i, j, k);",
    "  i = 5; j = 10; k=0;",
    "  k = (i++) + (j++); //Illustrates using parentheses to control evaluation order",
    "  printf(\"i = %d, j = %d, k = %d\\n\", i, j, k);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates the importance of operator precedence and associativity. The first assignment to `k` shows left-to-right associativity of the addition operator.  `i++` (post-increment) is evaluated first, adding 5 to `j++` (which is also 10 before incrementing). After the addition, both `i` and `j` are incremented. The second assignment shows the effect of parentheses; each expression in parentheses is fully evaluated before the addition.  This results in different values for `i`, `j`, and `k` compared to the first example, highlighting how controlling the evaluation order with parentheses is essential for producing intended results.",
  "extraction_metadata": {
    "source": "Unknown Source",
    "page_range": "76-76",
    "extraction_date": "2025-07-16T12:06:03.325935",
    "has_code": true,
    "has_explanation": true,
    "book_context": "c_programming"
  }
}