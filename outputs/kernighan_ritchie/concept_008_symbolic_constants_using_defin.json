{
  "topic": "Symbolic Constants using #define",
  "explanation": "Symbolic constants, defined using the `#define` preprocessor directive, replace textual occurrences of a name with a specified value. This improves code readability and maintainability by making the code more self-documenting and easier to modify.  Magic numbers (unnamed constants) are replaced with meaningful names, enhancing understanding and simplifying updates.",
  "syntax": "#define name replacement_text",
  "code_example": [
    "#include <stdio.h>",
    "#define LOWER 0",
    "#define UPPER 100",
    "#define STEP 10",
    "int main() {",
    "  int fahr;",
    "  for (fahr = LOWER; fahr <= UPPER; fahr = fahr + STEP) {",
    "    printf(\"%3d %6.1f\\n\", fahr, (5.0/9.0)*(fahr-32));",
    "  }",
    "  return 0;",
    "}"
  ],
  "example_explanation": "This example defines three symbolic constants: `LOWER`, `UPPER`, and `STEP`.  `LOWER` sets the lower limit of a temperature range to 0, `UPPER` sets the upper limit to 100, and `STEP` sets the increment to 10.  These names are then used in the `for` loop, making the code clearer than if the numbers 0, 100, and 10 were used directly.  The preprocessor replaces `LOWER`, `UPPER`, and `STEP` with their defined values before compilation.",
  "extraction_metadata": {
    "source": "The C Programming Language - Kernighan & Ritchie",
    "page_range": "17-17",
    "extraction_date": "2025-07-13T00:55:50.982526",
    "has_code": true,
    "has_explanation": true
  }
}