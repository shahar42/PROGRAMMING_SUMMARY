{
  "topic": "Counting Set Bits in an Integer",
  "explanation": "This concept describes how to count the number of bits that are set to 1 in an unsigned integer.  It's useful in various bit manipulation tasks and algorithms, such as determining the Hamming distance between two numbers or optimizing certain operations at a low level.",
  "syntax": "int countSetBits(unsigned int x) {\n  int count = 0;\n  while (x > 0) {\n    if (x & 1) {  // Check least significant bit\n      count++;\n    }\n    x >>= 1; // Right-shift x by 1 bit\n  }\n  return count;\n}",
  "code_example": [
    "#include <stdio.h>",
    "int countSetBits(unsigned int x) {",
    "  int count = 0;",
    "  while (x > 0) {",
    "    if (x & 1) {",
    "      count++;",
    "    }",
    "    x >>= 1;",
    "  }",
    "  return count;",
    "}",
    "int main() {",
    "  unsigned int num = 10; // Example number (binary 1010)",
    "  int setBits = countSetBits(num);",
    "  printf(\"Number of set bits in %u is %d\\n\", num, setBits);",
    "  return 0;",
    "}"
  ],
  "example_explanation": "The `main` function calls `countSetBits` with the number 10 (binary 1010).  The `countSetBits` function iteratively checks the least significant bit using the bitwise AND operator (`&`). If the least significant bit is 1, the `count` is incremented. Then, the number is right-shifted (`>>= 1`) to move the next bit to the least significant position. This process continues until the number becomes 0. The final `count` (which will be 2 in this case, representing the two '1' bits in 1010) is returned and printed.",
  "extraction_metadata": {
    "source": "The C Programming Language - Kernighan & Ritchie",
    "page_range": "46-46",
    "extraction_date": "2025-07-12T03:12:59.412200",
    "has_code": true,
    "has_explanation": true
  }
}
