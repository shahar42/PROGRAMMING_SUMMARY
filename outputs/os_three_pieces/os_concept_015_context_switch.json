{
  "topic": "Context Switch",
  "explanation": "A context switch is a technique used in operating systems to pause the execution of one program and resume another on the same CPU, enabling efficient timesharing of resources like the processor. It allows multiple processes to share the CPU by saving the current program's state and loading another, which is essential for multitasking and responsive systems in modern OSes.",
  "syntax": "int setjmp(jmp_buf env); void longjmp(jmp_buf env, int val);",
  "code_example": [
    "#include <setjmp.h>",
    "#include <stdio.h>",
    "",
    "jmp_buf env;",
    "",
    "int main() {",
    "    if (setjmp(env) == 0) {",
    "        printf(\"Original context: Starting execution\\n\");",
    "        longjmp(env, 1);  // Simulate switching to another context",
    "    } else {",
    "        printf(\"Switched context: Execution resumed here\\n\");",
    "    }",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This program uses setjmp to save the current context and longjmp to restore it, simulating a basic context switch. It first prints a message in the original context, then jumps to the else block, printing a message in the switched context, demonstrating how execution state is saved and restored to enable timesharing of the CPU.",
  "extraction_metadata": {
    "source": "Operating Systems - Three Easy Pieces",
    "page_range": "47-47",
    "extraction_date": "2025-07-14T01:36:01.555057",
    "has_code": false,
    "has_explanation": true
  }
}