{
  "topic": "Dynamic Memory Allocation with malloc",
  "explanation": "Dynamic memory allocation in C allows programs to request memory at runtime using functions like malloc, which allocates a block of memory from the heap. It is used when the size of data is not known in advance or needs to change during execution, enabling flexible data structures and efficient memory use.",
  "syntax": "void* malloc(size_t size);",
  "code_example": [
    "#include <stdio.h>",
    "#include <stdlib.h>",
    "",
    "int main() {",
    "    int* ptr;  // Declare a pointer",
    "    ptr = (int*) malloc(sizeof(int));  // Allocate memory for an integer",
    "    if (ptr != NULL) {  // Check if allocation was successful",
    "        *ptr = 42;  // Assign a value to the allocated memory",
    "        printf(\"Allocated value: %d\\n\", *ptr);  // Print the value",
    "    } else {",
    "        printf(\"Memory allocation failed\\n\");",
    "    }",
    "    free(ptr);  // Free the allocated memory",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates dynamic memory allocation with malloc by requesting memory for an integer, checking if the allocation succeeded, assigning a value to it, printing the value, and then freeing the memory to show proper usage and prevent leaks.",
  "extraction_metadata": {
    "source": "Operating Systems - Three Easy Pieces",
    "page_range": "3-3",
    "extraction_date": "2025-07-13T00:42:33.005709",
    "has_code": false,
    "has_explanation": false
  }
}