{
  "topic": "Command-Line Argument Parsing in C",
  "explanation": "Command-line argument parsing in C is the process of accessing and interpreting inputs provided when running a program from the command line. It allows programs to accept variable inputs, such as options or flags, making them more flexible and configurable for different scenarios, like specifying parameters in a simulation tool.",
  "syntax": "int main(int argc, char *argv[])",
  "code_example": [
    "#include <stdio.h>",
    "int main(int argc, char *argv[]) {",
    "    if (argc > 1) {",
    "        for (int i = 1; i < argc; i++) {",
    "            if (strcmp(argv[i], \"-S\") == 0) {",
    "                printf(\"Flag -S detected.\\n\");",
    "            }",
    "        }",
    "    } else {",
    "        printf(\"No arguments provided.\\n\");",
    "    }",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates command-line argument parsing by checking if the program is run with the '-S' flag. The main function uses argc to count arguments and argv to access them as strings. It loops through the arguments, compares each to '-S' using strcmp, and prints a message if found, showing how flags can be detected and handled to configure program behavior.",
  "extraction_metadata": {
    "source": "Operating Systems - Three Easy Pieces",
    "page_range": "106-106",
    "extraction_date": "2025-07-18T01:49:25.697365",
    "has_code": false,
    "has_explanation": true
  }
}