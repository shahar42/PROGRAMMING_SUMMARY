{
  "topic": "Context Saving and Restoring with setjmp and longjmp",
  "explanation": "setjmp and longjmp are C standard library functions that allow a program to save the current execution context (including registers and stack pointer) and later restore it to perform a non-local jump. They are used for error handling, simulating context switches, or escaping deeply nested functions without unwinding the stack manually, providing a way to manage control flow in a manner similar to low-level context switching in operating systems.",
  "syntax": "int setjmp(jmp_buf env); void longjmp(jmp_buf env, int val);",
  "code_example": [
    "#include <setjmp.h>",
    "#include <stdio.h>",
    "",
    "jmp_buf env;",
    "",
    "int main() {",
    "    if (setjmp(env) == 0) {",
    "        printf(\"Original context: Saving and jumping\\n\");",
    "        longjmp(env, 1);  // Restore context and jump",
    "    } else {",
    "        printf(\"Restored context: Execution resumed\\n\");",
    "    }",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This program demonstrates context saving and restoring by first using setjmp to save the current context in the main function. When longjmp is called, it restores the saved context and resumes execution from the setjmp call, jumping to the else block. This shows how the context (including program state) is preserved and restored, illustrating the concept in a simple, runnable manner.",
  "extraction_metadata": {
    "source": "Operating Systems - Three Easy Pieces",
    "page_range": "76-76",
    "extraction_date": "2025-07-16T23:02:47.398290",
    "has_code": false,
    "has_explanation": true
  }
}