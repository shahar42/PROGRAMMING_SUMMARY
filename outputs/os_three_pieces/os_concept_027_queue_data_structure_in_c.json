{
  "topic": "Queue Data Structure in C",
  "explanation": "A queue is a First-In-First-Out (FIFO) data structure that stores elements in a linear order, where the first element added is the first one removed. It is used in C programming to manage ordered processes, such as in scheduling algorithms, to ensure tasks are handled sequentially without priority inversion.",
  "syntax": "void enqueue(queue* q, int item); int dequeue(queue* q);",
  "code_example": [
    "#include <stdio.h>",
    "#include <stdlib.h>",
    "typedef struct Node {",
    "    int data;",
    "    struct Node* next;",
    "} Node;",
    "void enqueue(Node** front, Node** rear, int value) {",
    "    Node* newNode = (Node*)malloc(sizeof(Node));",
    "    newNode->data = value;",
    "    newNode->next = NULL;",
    "    if (*rear == NULL) {",
    "        *front = newNode;",
    "        *rear = newNode;",
    "    } else {",
    "        (*rear)->next = newNode;",
    "        *rear = newNode;",
    "    }",
    "}",
    "int dequeue(Node** front) {",
    "    if (*front == NULL) {",
    "        printf(\"Queue is empty\\n\");",
    "        return -1;  // Error value",
    "    }",
    "    Node* temp = *front;",
    "    int value = temp->data;",
    "    *front = temp->next;",
    "    free(temp);",
    "    return value;",
    "}",
    "int main() {",
    "    Node* front = NULL;",
    "    Node* rear = NULL;",
    "    enqueue(&front, &rear, 10);",
    "    enqueue(&front, &rear, 20);",
    "    printf(\"Dequeued: %d\\n\", dequeue(&front));",
    "    printf(\"Dequeued: %d\\n\", dequeue(&front));",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example implements a basic queue using a linked list in C. It uses the enqueue function to add elements (10 and 20) in FIFO order and the dequeue function to remove them, demonstrating how the first element added (10) is removed first, illustrating the core FIFO behavior of a queue.",
  "extraction_metadata": {
    "source": "Operating Systems - Three Easy Pieces",
    "page_range": "106-106",
    "extraction_date": "2025-07-18T01:49:07.673874",
    "has_code": false,
    "has_explanation": false
  }
}