{
  "topic": "Overlapping Operations with Threads",
  "explanation": "Overlapping operations with threads in C allows multiple tasks to run concurrently, improving system utilization by performing operations like I/O without blocking the entire program. This is useful for maximizing efficiency in systems where operations such as disk I/O or network communication can be started and then continued alongside other work.",
  "syntax": "pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void*), void *arg);",
  "code_example": [
    "#include <pthread.h>",
    "#include <stdio.h>",
    "",
    "void *thread_function(void *arg) {",
    "    printf(\"Thread is working\\n\");",
    "    return NULL;",
    "}",
    "",
    "int main() {",
    "    pthread_t thread;",
    "    pthread_create(&thread, NULL, thread_function, NULL);",
    "    printf(\"Main is working\\n\");",
    "    pthread_join(thread, NULL);",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates overlapping operations by creating a new thread that prints 'Thread is working' while the main thread continues and prints 'Main is working'. The pthread_create function starts the thread operation, allowing both the main thread and the new thread to execute concurrently, which shows how operations can overlap to improve utilization without waiting for one to finish before starting the next.",
  "extraction_metadata": {
    "source": "Operating Systems - Three Easy Pieces",
    "page_range": "91-91",
    "extraction_date": "2025-07-18T00:56:24.892228",
    "has_code": false,
    "has_explanation": false
  }
}