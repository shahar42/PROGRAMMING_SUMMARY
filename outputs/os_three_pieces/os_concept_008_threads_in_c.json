{
  "topic": "Threads in C",
  "explanation": "Threads in C are lightweight units of execution within a process that allow multiple tasks to run concurrently, improving program efficiency and responsiveness. They are used to handle parallel operations, such as I/O-bound or CPU-intensive tasks, but require a solid understanding of processes and memory management to avoid issues like race conditions or deadlocks.",
  "syntax": "int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void*), void *arg)",
  "code_example": [
    "#include <stdio.h>",
    "#include <pthread.h>",
    "",
    "void *print_message(void *arg) {",
    "    printf(\"Hello from thread!\\n\");",
    "    return NULL;",
    "}",
    "",
    "int main() {",
    "    pthread_t thread_id;",
    "    if (pthread_create(&thread_id, NULL, print_message, NULL) != 0) {",
    "        printf(\"Thread creation failed\\n\");",
    "        return 1;",
    "    }",
    "    pthread_join(thread_id, NULL);",
    "    printf(\"Hello from main thread!\\n\");",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates creating and using a thread in C by defining a function 'print_message' that runs in a new thread. The main function creates the thread with pthread_create, waits for it to finish using pthread_join, and then prints a message. This shows how threads enable concurrent execution, as the new thread prints its message before the main thread continues, illustrating the concept of parallelism in a simple, self-contained program.",
  "extraction_metadata": {
    "source": "Operating Systems - Three Easy Pieces",
    "page_range": "16-16",
    "extraction_date": "2025-07-13T00:59:00.980241",
    "has_code": false,
    "has_explanation": true
  }
}