{
  "topic": "Concurrency in C",
  "explanation": "Concurrency in C refers to the ability to execute multiple tasks simultaneously, which is useful for improving program efficiency, responsiveness, and utilizing multi-core processors. It is achieved through mechanisms like threads, allowing different parts of a program to run independently without blocking each other.",
  "syntax": "int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg)",
  "code_example": [
    "#include <stdio.h>",
    "#include <pthread.h>",
    "",
    "void *myThreadFunction(void *arg) {",
    "    printf(\"Thread is running\\n\");",
    "    return NULL;",
    "}",
    "",
    "int main() {",
    "    pthread_t thread;",
    "    pthread_create(&thread, NULL, myThreadFunction, NULL);",
    "    pthread_join(thread, NULL);",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This program demonstrates concurrency by creating a new thread using pthread_create, which runs the myThreadFunction independently. The main thread waits for it using pthread_join, showing how multiple execution paths can operate simultaneously to enhance program performance.",
  "extraction_metadata": {
    "source": "Operating Systems - Three Easy Pieces",
    "page_range": "3-3",
    "extraction_date": "2025-07-13T00:42:42.222941",
    "has_code": false,
    "has_explanation": false
  }
}