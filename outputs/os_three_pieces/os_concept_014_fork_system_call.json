{
  "topic": "Fork System Call",
  "explanation": "The fork() system call in C is used to create a new process by duplicating the existing one, allowing for concurrency and multitasking. It enables the illusion of running multiple programs simultaneously on a single CPU through time-sharing, as the operating system switches between processes, making the system more efficient and user-friendly.",
  "syntax": "pid_t fork(void);",
  "code_example": [
    "#include <stdio.h>",
    "#include <unistd.h>",
    "int main() {",
    "    printf(\"Before fork\\n\");",
    "    pid_t pid = fork();",
    "    if (pid == 0) {",
    "        printf(\"Child process\\n\");",
    "    } else {",
    "        printf(\"Parent process\\n\");",
    "    }",
    "    return 0;",
    "}"
  ],
  "example_explanation": "This example demonstrates the fork() system call by first printing 'Before fork' in the parent process. After fork() is called, it creates a child process, which prints 'Child process'. The parent process prints 'Parent process'. This shows how one program can spawn multiple processes, illustrating the concept of CPU time-sharing where the OS manages execution between them.",
  "extraction_metadata": {
    "source": "Operating Systems - Three Easy Pieces",
    "page_range": "46-47",
    "extraction_date": "2025-07-14T01:35:53.190406",
    "has_code": false,
    "has_explanation": true
  }
}